function main() {
  const sheet_id = 'sheet-id';
  const doc_id = 'doc-id';
  
  var sheet = createAndNameNewSheet(sheet_id);
  
  // Call the function to update the table data in the new sheet
  updateTableDataInSheets(sheet, doc_id);
}

function createAndNameNewSheet(sheet_id) {
  // Open the spreadsheet
  var spreadsheet = SpreadsheetApp.openById(sheet_id); 
  var scriptProperties = PropertiesService.getScriptProperties();

  // Get the current count
  var count = scriptProperties.getProperty('sheetCount');
  if (count == null) {
    // If count is not set yet, start it at 1
    count = 1;
  } else {
    // Otherwise, parse it as an integer and increment it
    count = parseInt(count) + 1;
  }

  // Store the incremented count back to the script properties
  scriptProperties.setProperty('sheetCount', count.toString());

  // Create a new sheet with the count in its name
  var sheetName = count + '.Imported OKRs ';
  var sheet = spreadsheet.insertSheet(sheetName);

  return sheet;
}

function updateTableDataInSheets(sheet, doc_id) {
  var doc = DocumentApp.openById(doc_id);
  var body = doc.getBody();
  var tables = body.getTables();

  // add column headers to the new sheet
  var column_headers = ['Category', 'OKR', 'Impact [1-0]', 'Confidence [1-10]', 'Ease of Implementation [1-10]', 'ICE Score [I*C*E'];
  for (var i = 0; i < column_headers.length; i++) {
    var range = sheet.getRange(1, i+1);
    range.setValue(column_headers[i]);
    range.setFontWeight('bold');  // Set the font weight to bold
  }

  // loop through all tables in the source doc, appending their data to the current sheet
  var max_row = 1;
  for (var i = 0; i < tables.length; i++) {
    var table = tables[i];
    for (var row = 0; row < table.getNumRows(); row++) {
      for (var col = 0; col < table.getRow(row).getNumCells(); col++) {
        var cellText = table.getCell(row, col).getText();
        const log_id = i.toString() + row.toString() + col.toString()
        const sheet_row = row + max_row + 1;
        const sheet_col = col + 1;

        console.log(`${log_id} Source: GDoc table #` + i.toString() + "; R" + (row+1).toString() + "C" + (col+1).toString());
        console.log(`${log_id} Content: ` + cellText)
        console.log(`${log_id} Destination: GSheet cell R` + sheet_row.toString() + " C" + sheet_col.toString())

        sheet.getRange(sheet_row, sheet_col).setValue(cellText);
        sheet.getRange(sheet_row, 6).setFormula(`=C${sheet_row}*D${sheet_row}*E${sheet_row}`)
      }
    }
    max_row = max_row + table.getNumRows()
  }
}
